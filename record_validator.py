from common import ProcessedRecord


def validate_mapping(record: ProcessedRecord) -> bool:
    """
    Validates the mapping by reconstructing the masked text record from the results
    and comparing it to the original res_record.

    Args:
        results: The list of MaskResult objects generated by map_record().

    Returns:
        True if the reconstructed masked text matches the original res_record, False otherwise.
    """
    results = record.mask_info

    if not results and not record.res_record and not record.text_record:
        # Both empty, considered valid alignment
        return True

    # Sort results by start index to reconstruct in order
    sorted_results = sorted(results, key=lambda r: r.start)

    reconstructed_parts = []
    current_pos_in_text = 0

    for res in sorted_results:
        # Add the non-mask text before the current mask
        if res.start > current_pos_in_text:
            reconstructed_parts.append(record.text_record[current_pos_in_text : res.start])
        elif res.start < current_pos_in_text:
            # This indicates an issue with overlapping or out-of-order results
            print(f"Validation Warning: Overlapping or out-of-order results detected at start index {res.start}. Current text position is {current_pos_in_text}. Validation may fail.")
            # Depending on requirements, you might return False immediately here
            # return False

        # Add the masked text
        reconstructed_parts.append(res.masked_text)

        # Update the current position to the end of the current mask's text in the original text_record
        current_pos_in_text = res.end

    # Add any remaining non-mask text after the last mask
    if current_pos_in_text < len(record.text_record):
        reconstructed_parts.append(record.text_record[current_pos_in_text:])
    # Handle case where text_record might be shorter than expected based on result ends
    elif current_pos_in_text > len(record.text_record):
        print(f"Validation Warning: Result end index {current_pos_in_text} exceeds text_record length {len(record.text_record)}. Validation may fail.")


    reconstructed_res = "".join(reconstructed_parts)

    # Perform the comparison
    is_valid = reconstructed_res == record.res_record

    return is_valid